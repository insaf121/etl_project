import csv
import time
from datetime import datetime
import psycopg2
from database import get_db_connection
from logger import log_etl_event

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü (keys - –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏, date_cols - –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏)
TABLE_CONFIGS = {
    'DS.FT_BALANCE_F': {
        'keys': ['on_date', 'account_rk'],
        'date_cols': {'on_date': '%d.%m.%Y'}
    },
    'DS.FT_POSTING_F': {
        'keys': None,  # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã
        'date_cols': {'oper_date': '%d.%m.%Y'}
    },
    'DS.MD_CURRENCY_D': {
        'keys': ['currency_rk', 'data_actual_date'],
        'date_cols': {'data_actual_date': '%d.%m.%Y'},
        'encoding': 'windows-1251'  # –°–ø–µ—Ü. –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
    },
      'DS.MD_ACCOUNT_D': {
        'keys': ['data_actual_date', 'account_rk'],
        'date_cols': {
            'data_actual_date': '%d.%m.%Y',
            'data_actual_end_date': '%d.%m.%Y'
        }
    },
    'DS.MD_EXCHANGE_RATE_D': {
        'keys': ['data_actual_date', 'currency_rk'],
        'date_cols': {
            'data_actual_date': '%d.%m.%Y',
            'data_actual_end_date': '%d.%m.%Y'
        }
    },
    'DS.MD_LEDGER_ACCOUNT_S': {
        'keys': ['ledger_account', 'start_date'],
        'date_cols': {
            'start_date': '%d.%m.%Y',
            'end_date': '%d.%m.%Y'  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å –≤ CSV
        }
    }
}

def transform_value(value, date_format=None):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–∞—Ç—ã)"""
    if not value or not value.strip():
        return None
    if date_format:
        try:
            return datetime.strptime(value, date_format).date()
        except ValueError:
            return None
    return value

def load_table(csv_path, table_name, encoding='utf-8'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    conn = None
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        config = TABLE_CONFIGS[table_name]
        log_etl_event(table_name, "START", 0, f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {csv_path}")
        print(f"‚è≥ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {table_name}...")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(5)
        
        start_time = time.time()

        # 3. –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        with open(csv_path, 'r', encoding=encoding, errors='replace') as f:
            reader = csv.reader(f, delimiter=';')
            headers = [col.strip() for col in next(reader)]
            rows = list(reader)

        # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()

        # 5. –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è FT_POSTING_F)
        if table_name == "DS.FT_POSTING_F":
            cur.execute(f"TRUNCATE TABLE {table_name}")

        # 6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
        if config['keys']:
            # UPSERT –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å –∫–ª—é—á–∞–º–∏
            update_cols = [col for col in headers if col not in config['keys']]
            query = f"""
                INSERT INTO {table_name} ({', '.join(headers)})
                VALUES ({', '.join(['%s']*len(headers))})
                ON CONFLICT ({', '.join(config['keys'])})
                DO UPDATE SET {', '.join([f"{col}=EXCLUDED.{col}" for col in update_cols])}
            """
        else:
            # –ü—Ä–æ—Å—Ç–æ–π INSERT –¥–ª—è —Ç–∞–±–ª–∏—Ü –±–µ–∑ –∫–ª—é—á–µ–π
            query = f"INSERT INTO {table_name} ({', '.join(headers)}) VALUES ({', '.join(['%s']*len(headers))})"

        # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        for row in rows:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–∞—Ç)
            processed_row = [
                transform_value(value, config['date_cols'].get(col))
                for col, value in zip(headers, row)
            ]
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            cur.execute(query, processed_row)
        
        conn.commit()
        
        # 8. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        duration = round(time.time() - start_time, 2)
        msg = f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∑–∞ {duration} —Å–µ–∫"
        log_etl_event(table_name, "FINISH", len(rows), msg)
        print(f"‚úÖ {msg}")

    except Exception as e:
        if conn: conn.rollback()
        log_etl_event(table_name, "ERROR", 0, str(e))
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if conn: conn.close()

def main():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    tables = [
        ("data/ft_balance_f.csv", "DS.FT_BALANCE_F"),
        ("data/ft_posting_f.csv", "DS.FT_POSTING_F"),
        ("data/md_currency_d.csv", "DS.MD_CURRENCY_D", "windows-1251"),
        ("data/md_account_d.csv", "DS.MD_ACCOUNT_D"),
        ("data/md_exchange_rate_d.csv", "DS.MD_EXCHANGE_RATE_D"),
        ("data/md_ledger_account_s.csv", "DS.MD_LEDGER_ACCOUNT_S")
    ]
    
    for item in tables:
        try:
            print(f"\n{'='*50}")
            print(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ {item[1]} –∏–∑ {item[0]}")
            load_table(*item)  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        except Exception as e:
            print(f"üö® –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            break

if __name__ == "__main__":
    main()